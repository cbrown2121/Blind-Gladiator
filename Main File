import time
import random
import pyttsx3
import os


# Start screen reader
engine = pyttsx3.init()

#Initialize the screen reader
def speak(text):
    print(text)
    engine.say(text)
    engine.runAndWait()

# Create arrays to hold the rooms in different areas
FIRST_ARRAY = list(range(1, 6))
SECOND_ARRAY = list(range(7, 12))
THIRD_ARRAY = list(range(13, 18))
FOURTH_ARRAY = list(range(19))

# Load room descriptions from text files
# To properly load room descriptions, change the "base_path" to the path where the room description files are stored on your pc
def load_room_description(room_number):
    base_path = r"C:\Users\brown\OneDrive\Documents\Education\Oakland University\Winter 2025\CSI - 3370\Echos of the Colosseum\room_descriptions"
    filename = os.path.join(base_path, f"room {room_number}.txt")

    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as file:
            return file.read().strip()
    else:
        return "This room feels... strange."

room_pools = [FIRST_ARRAY, SECOND_ARRAY, THIRD_ARRAY]

class Main:
    def __init__(self):
        self.menus = Menus(self)

    def start_game(self):
        self.menus.show_start_menu()

    def play(self):
        print("The game has started!\n")
        self.menus.show_action_menu()


class Menus:
    def __init__(self, game):
        self.game = game
        self.start_menu = StartMenu(self)
        self.settings_menu = SettingsMenu(self)
        self.load_game_menu = LoadGameMenu(self)
        self.action_menu = ActionMenu(self)
        self.pause_menu = PauseMenu(self)

    def show_start_menu(self):
        self.start_menu.show()

    def show_settings_menu(self):
        self.settings_menu.show()

    def show_load_game_menu(self):
        self.load_game_menu.show()

    def show_action_menu(self): 
        self.action_menu.show()

    def show_pause_menu(self):
        self.pause_menu.show()


class StartMenu:
    def __init__(self, menus):
        self.menus = menus

# Display start menu and get user input
    def show(self):
        speak("Welcome to Gladiator Survival!")
        speak("Start Menu:")
        speak("1. New Game")
        speak("2. Load Game")
        speak("3. Settings")
        speak("4. Exit")

        speak("Choose a menu option: ")
        user_selection = input()
        
        if user_selection == '1':
            self.new_game()
        elif user_selection == '2':
            speak("Loading game...\n")
            self.menus.show_load_game_menu()
        elif user_selection == '3':
            speak("Opening settings...\n")
            self.menus.show_settings_menu()
        elif user_selection == '4':
            speak("Exiting game...\n")
            exit()
        else:
            speak("Invalid selection, please try again.\n")
            self.show()

    def new_game(self):
        speak("Starting new game...")
        time.sleep(1)

        # Select a random room from the room pool. Start with area 1, then area 2, and 3
        for area_index, area_rooms in enumerate(room_pools):
            speak(f"Entering Area {area_index + 1}")
            print("------------------")

            while area_rooms:
                speak("Press Enter to enter the next room...")
                input()
                random_number = random.choice(area_rooms)
                area_rooms.remove(random_number)

                speak(f"Entering Room {random_number} in Area {area_index + 1}")
                description = load_room_description(random_number)
                speak(description)
                time.sleep(1)

            speak(f"Area {area_index + 1} cleared!")
            time.sleep(1)

        # All rooms have been cleared and the game in complete
        speak("All areas cleared! You survived Gladiator Survival!")
        self.menus.game.play()


class SettingsMenu:
    def __init__(self, menus):
        self.menus = menus

    def show(self):
        speak("Settings Menu:")
        print("1. Audio Settings")
        print("2. Visual Settings")
        print("3. Controls Settings")
        print("4. Back to Start Menu")
        choice = input("Choose an option: ")

        if choice == '1':
            speak("Adjusting audio settings...\n")
            self.show()
        elif choice == '2':
            speak("Adjusting visual settings...\n")
            self.show()
        elif choice == '3':
            speak("Adjusting controls...\n")
            self.show()
        elif choice == '4':
            speak("Returning to Start Menu...\n")
            self.menus.show_start_menu()
        else:
            speak("Invalid selection. Try again.\n")
            self.show()


class LoadGameMenu:
    def __init__(self, menus):
        self.menus = menus

    def show(self):
        speak("Load Game Menu:\n")
        speak("Loading previous game...\n")
        self.menus.game.play()


class ActionMenu:
    def __init__(self, menus):
        self.menus = menus

    def show(self):
        print("Action Menu:")
        print("1. Attack")
        print("2. Defend")
        print("3. Use Item")
        print("4. Flee")
        print("5. View Stats")
        print("6. Pause Game")
        action_choice = input("Choose an action: ")

        if action_choice == '1':
            print("You choose to attack!\n")
        elif action_choice == '2':
            print("You choose to defend!\n")
        elif action_choice == '3':
            print("You choose to use an item!\n")
        elif action_choice == '4':
            print("You choose to flee!\n")
            self.menus.show_start_menu()
        elif action_choice == '5':
            print("Displaying stats...\n")
        elif action_choice == '6':
            print("Pausing game...\n")
            self.menus.show_pause_menu()
        else:
            print("Invalid action, please try again.\n")
        self.show()


class PauseMenu:
    def __init__(self, menus):
        self.menus = menus

    def show(self):
        print("Pause Menu:")
        print("1. Resume Game")
        print("2. Save Game")
        print("3. Exit to Main Menu")
        pause_choice = input("Choose an option: ")

        if pause_choice == '1':
            print("Resuming game...\n")
            self.menus.show_action_menu()
        elif pause_choice == '2':
            print("Saving game...\n")
            print("Game saved!\n")
            self.show()
        elif pause_choice == '3':
            print("Exiting to Main Menu...\n")
            self.menus.show_start_menu()
        else:
            print("Invalid selection, please try again.\n")
            self.show()

class Character:
        def __init__(self, name):
            self.name = name

class Player(Character):
    def __init__(self, name, attack_stat, defend_stat, speed_stat, hit_chance_stat, crit_rate_stat):
        super().__init__(name)  # Call the constructor of the base class
        self.attack_stat = attack_stat
        self.defend_stat = defend_stat
        self.speed_stat = speed_stat
        self.hit_chance_stat = hit_chance_stat
        self.crit_rate_stat = crit_rate_stat

     def display_stats(self):
        print(f"Player: {self.name}")
        print(f"Attack: {self.attack_stat}")
        print(f"Defense: {self.defend_stat}")
        print(f"Speed: {self.speed_stat}")
        print(f"Hit Chance: {self.hit_chance_stat}")
        print(f"Critical Rate: {self.crit_rate_stat}")

if __name__ == "__main__":
    game = Main()
    game.start_game()
